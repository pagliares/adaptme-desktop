

//
//Automatically generated by XACDML
//
package adaptme;
import java.util.HashMap;
import java.util.Iterator;
import simula.manager.*;

public class ExperimentationProgramProxy

{
 public void execute()
 {
  System.out.println("\nGeracao de ExperimentationProgramProxy atraves de Simulation Manager");
  SimulationManager man= new SimulationManager();

  QueueEntry qe;//queues 
  ResourceEntry re;//resource queues
  ExternalActiveEntry eae;//generator and detroy
  InternalActiveEntry iae;//activivity and router
  InterruptActiveEntry intae;//interrupts
  ObserverEntry oe;
  HistogramEntry he;

  //queues and observer queues
  
  re = new ResourceEntry();
  re.SetId("IDLE queue");//mapped by dead id
  re.setInit((short) 2);
  re.setObsid("IDLE queue  observer 1");//observer
  man.AddResource(re);

  qe = new QueueEntry();
  qe.SetId("CALLER output queue0");//mapped by dead id
  qe.setObsid("CALLER output queue observer 1");//observer
  man.AddQueue(qe);
  

  qe = new QueueEntry();
  qe.SetId("CALLER input queue");//mapped by dead id
  qe.setObsid("CALLER input queue observer 1");//observer
  man.AddQueue(qe);
  

  qe = new QueueEntry();
  qe.SetId("INQUIRER output queue2");//mapped by dead id
  qe.setObsid("INQUIRER output queue observer 1");//observer
  man.AddQueue(qe);
  

  qe = new QueueEntry();
  qe.SetId("INQUIRER input queue");//mapped by dead id
  qe.setObsid("INQUIRER input queue observer 1");//observer
  man.AddQueue(qe);
  
  //active states

   //externals (generates and destroys)
  
  eae = new ExternalActiveEntry(false); //destroy
  eae.SetId( "destroy2"); //mapped by destroy id
  eae.setQID( "CALLER output queue0"); // mapped by prev dead
  man.AddActiveState(eae);
  
  eae = new ExternalActiveEntry(false); //destroy
  eae.SetId( "destroy4"); //mapped by destroy id
  eae.setQID( "INQUIRER output queue2"); // mapped by prev dead
  man.AddActiveState(eae);
  

   //internals (activities and routers)

  
  iae = new InternalActiveEntry(true); //isn't router
  iae.SetId( "Talk"); //mapped by act id
  iae.setServiceDist(ActiveEntry.NEGEXP);// mapped by stat type
  iae.setDistP1((int)30.0);// mapped by parm1
  iae.addCond("true");
  iae.addToResource("IDLE queue");// mapped by next resource dead
  iae.addResourceQty(new Integer(2));// mapped by init on resource dead
  iae.addFromResource("IDLE queue");// mapped by prev resource dead
  iae.addToQueue("CALLER output queue0");// mapped by next dead
  iae.addFromQueue("CALLER input queue");// mapped by prev dead
  man.AddActiveState(iae);
  
  iae = new InternalActiveEntry(true); //isn't router
  iae.SetId( "Service"); //mapped by act id
  iae.setServiceDist(ActiveEntry.NEGEXP);// mapped by stat type
  iae.setDistP1((int)30.0);// mapped by parm1
  iae.addCond("true");
  iae.addToResource("IDLE queue");// mapped by next resource dead
  iae.addResourceQty(new Integer(2));// mapped by init on resource dead
  iae.addFromResource("IDLE queue");// mapped by prev resource dead
  iae.addToQueue("INQUIRER output queue2");// mapped by next dead
  iae.addFromQueue("INQUIRER input queue");// mapped by prev dead
  man.AddActiveState(iae);
  

  //observers

  
  oe= new ObserverEntry(ObserverEntry.RESOURCE,"IDLE queue");//observer resource
  oe.SetId("IDLE queue  observer 1");
  man.AddObserver(oe);
  
  oe= new ObserverEntry(ObserverEntry.QUEUE,"CALLER output queue0");//observer queue
  oe.SetId("CALLER output queue observer 1");
  man.AddObserver(oe);
  
  oe= new ObserverEntry(ObserverEntry.QUEUE,"CALLER input queue");//observer queue
  oe.SetId("CALLER input queue observer 1");
  man.AddObserver(oe);
  
  oe= new ObserverEntry(ObserverEntry.QUEUE,"INQUIRER output queue2");//observer queue
  oe.SetId("INQUIRER output queue observer 1");
  man.AddObserver(oe);
  
  oe= new ObserverEntry(ObserverEntry.QUEUE,"INQUIRER input queue");//observer queue
  oe.SetId("INQUIRER input queue observer 1");
  man.AddObserver(oe);
  
  oe= new ObserverEntry(ObserverEntry.ACTIVE,"Talk");
  oe.SetId("Talk observer 1");
  man.AddObserver(oe);
  
  

  iae = (InternalActiveEntry)man.GetActiveState("Talk");
  iae.setObsid("Talk observer 1");
  
  oe= new ObserverEntry(ObserverEntry.ACTIVE,"Service");
  oe.SetId("Service observer 1");
  man.AddObserver(oe);
  
  

  iae = (InternalActiveEntry)man.GetActiveState("Service");
  iae.setObsid("Service observer 1");
  

  //generate the model

  if (man.GenerateModel())
     System.out.println("\nModel successfuly generated!");
  else
  {
     System.out.println("\nThere was an errors during the model generation!");
     System.out.println("Exiting...");
     return;
  }

  //start the simulation

  System.out.println("Starting the simulation. Simulation wil run unitl time=500");

  man.ExecuteSimulation(500);

  while (!man.Finished())
  {
   try
   {
    Thread.sleep(1000);
   }
   catch(InterruptedException e) {break;}
  }

  System.out.println("Simulation Stopped!");

  //finally, output the results

  Iterator it;
  HashMap observers = man.getObservers();
  it = observers.values().iterator();
 
 
   System.out.println("IMPRIMINDO APENAS UM OBSERVADOR");
   ObserverEntry observerEntry = (ObserverEntry)it.next();
   man.printObserversReport(observerEntry);
				
 
  man.OutputSimulationResults ("ExperimentationProgramProxy.out");
  

  
  System.out.println("\nThat's all folks!");
 }
}
