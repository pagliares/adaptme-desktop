

//
//Automatically generated by XACDML
//
package adaptme;
import java.util.HashMap;
import java.util.Iterator;
import simula.manager.*;

public class ExperimentationProgramProxy2

{

 private SimulationManager man;
 public void execute()
 {
  System.out.println("\nGeracao de XP_Final atraves de Simulation Manager");
  man= new SimulationManager();

  QueueEntry qe;//queues 
  ResourceEntry re;//resource queues
  ExternalActiveEntry eae;//generator and detroy
  InternalActiveEntry iae;//activivity and router
//  InterruptActiveEntry intae;//interrupts
    ObserverEntry oe;
//  HistogramEntry he;

  //queues and observer queues
  
  re = new ResourceEntry();
  re.SetId("Customer queue");//mapped by dead id
  re.setInit((short) 2);
  re.setObsid("Customer queue  observer 1");//observer
  man.AddResource(re);

  qe = new QueueEntry();
  qe.SetId("Development team queue");//mapped by dead id
  qe.setObsid("Development team queue  observer 1");//observer
  man.AddQueue(qe);
  

  qe = new QueueEntry();
  qe.SetId("User story output queue0");//mapped by dead id
  qe.setObsid("User story output queue observer 1");//observer
  man.AddQueue(qe);
  

  qe = new QueueEntry();
  qe.SetId("User story input queue");//mapped by dead id
  qe.setObsid("User story input queue observer 1");//observer
  man.AddQueue(qe);
  

  qe = new QueueEntry();
  qe.SetId("User story output queue2");//mapped by dead id
  qe.setObsid("User story output queue observer 2");//observer
  man.AddQueue(qe);
  
  
  

  qe = new QueueEntry();
  qe.SetId("User story output queue4");//mapped by dead id
  qe.setObsid("User story output queue observer 3");//observer
  man.AddQueue(qe);
  

  qe = new QueueEntry();
  qe.SetId("Classes output queue6");//mapped by dead id
  qe.setObsid("Classes output queue observer 1");//observer
  man.AddQueue(qe);
  
  //active states

//   //externals (generates and destroys)
  
  eae = new ExternalActiveEntry(true); //generate
  eae.SetId("User story"); //mapped by generate id
  eae.setQID("User story input queue"); // mapped by next dead
  eae.setServiceDist( ActiveEntry.CONST);// mapped by stat type
  eae.setDistP1((int)30.0);// mapped by parm1
  man.AddActiveState(eae);
  
  eae = new ExternalActiveEntry(false); //destroy
  eae.SetId( "destroy3"); //mapped by destroy id
  eae.setQID( "User story output queue0"); // mapped by prev dead
  man.AddActiveState(eae);
  
  eae = new ExternalActiveEntry(false); //destroy
  eae.SetId( "destroy5"); //mapped by destroy id
  eae.setQID( "User story output queue2"); // mapped by prev dead
  man.AddActiveState(eae);
  
  eae = new ExternalActiveEntry(false); //destroy
  eae.SetId( "destroy7"); //mapped by destroy id
  eae.setQID( "Classes output queue6"); // mapped by prev dead
  man.AddActiveState(eae);
  

   //internals (activities and routers)

  
  iae = new InternalActiveEntry(true); //isn't router
  iae.SetId( "Prioritize user stories"); //mapped by act id
  iae.setServiceDist(ActiveEntry.NEGEXP);// mapped by stat type
  iae.setDistP1((int)30.0);// mapped by parm1
  iae.addCond("true");
  iae.addToResource("Customer queue");// mapped by next resource dead
  iae.addResourceQty(new Integer(2));// mapped by init on resource dead
  iae.addFromResource("Customer queue");// mapped by prev resource dead
  iae.addToQueue("User story output queue0");// mapped by next dead
  iae.addFromQueue("User story input queue");// mapped by prev dead
  man.AddActiveState(iae);
  
  iae = new InternalActiveEntry(true); //isn't router
  iae.SetId( "Split macro user stories"); //mapped by act id
  iae.setServiceDist(ActiveEntry.NEGEXP);// mapped by stat type
  iae.setDistP1((int)30.0);// mapped by parm1
  iae.addCond("true");
  iae.addToResource("Customer queue");// mapped by next resource dead
  iae.addResourceQty(new Integer(2));// mapped by init on resource dead
  iae.addFromResource("Customer queue");// mapped by prev resource dead
  iae.addToQueue("User story output queue2");// mapped by next dead
  iae.addFromQueue("User story input queue");// mapped by prev dead
  man.AddActiveState(iae);
  
  iae = new InternalActiveEntry(true); //isn't router
  iae.SetId( "Estimate user stories"); //mapped by act id
  iae.setServiceDist(ActiveEntry.NEGEXP);// mapped by stat type
  iae.setDistP1((int)30.0);// mapped by parm1
  iae.addCond("true");
  iae.addToQueue("Development team queue");// mapped by next dead
  iae.addFromQueue("Development team queue");// mapped by prev dead
  iae.addToQueue("User story output queue4");// mapped by next dead
  iae.addFromQueue("User story input queue");// mapped by prev dead
  man.AddActiveState(iae);
  
  iae = new InternalActiveEntry(true); //isn't router
  iae.SetId( "Solo programming with test first"); //mapped by act id
  iae.setServiceDist(ActiveEntry.NEGEXP);// mapped by stat type
  iae.setDistP1((int)30.0);// mapped by parm1
  iae.addCond("true");
  iae.addToQueue("Development team queue");// mapped by next dead
  iae.addFromQueue("Development team queue");// mapped by prev dead
//  iae.addToQueue("Classes output queue6");// mapped by next dead
  iae.addFromQueue("User story output queue4");// mapped by prev dead
  man.AddActiveState(iae);
  

//  //observers
//
//  
   oe= new ObserverEntry(ObserverEntry.RESOURCE,"Customer queue");//observer resource
   oe.SetId("Customer queue  observer 1");
   man.AddObserver(oe);
//  
  oe= new ObserverEntry(ObserverEntry.QUEUE,"Development team queue");//observer queue
  oe.SetId("Development team queue  observer 1");
  man.AddObserver(oe);
  
  oe= new ObserverEntry(ObserverEntry.QUEUE,"User story output queue0");//observer queue
  oe.SetId("User story output queue observer 1");
  man.AddObserver(oe);
  
  oe= new ObserverEntry(ObserverEntry.QUEUE,"User story input queue");//observer queue
  oe.SetId("User story input queue observer 1");
  man.AddObserver(oe);
  
  oe= new ObserverEntry(ObserverEntry.QUEUE,"User story output queue2");//observer queue
  oe.SetId("User story output queue observer 2");
  man.AddObserver(oe);
  
  oe= new ObserverEntry(ObserverEntry.QUEUE,"User story output queue4");//observer queue
  oe.SetId("User story output queue observer 3");
  man.AddObserver(oe);
  
  oe= new ObserverEntry(ObserverEntry.QUEUE,"Classes output queue6");//observer queue
  oe.SetId("Classes output queue observer 1");
  man.AddObserver(oe);
  
  oe= new ObserverEntry(ObserverEntry.ACTIVE,"User story");
  oe.SetId("User story input queue generate activity observer 1");
  man.AddObserver(oe);

  eae = (ExternalActiveEntry)man.GetActiveState("User story");
  eae.setObsid("User story input queue generate activity observer 1");
  
  oe= new ObserverEntry(ObserverEntry.ACTIVE,"Prioritize user stories");
  oe.SetId("Prioritize user stories observer 1");
  man.AddObserver(oe);
  
  

  iae = (InternalActiveEntry)man.GetActiveState("Prioritize user stories");
  iae.setObsid("Prioritize user stories observer 1");
  
  oe= new ObserverEntry(ObserverEntry.ACTIVE,"Split macro user stories");
  oe.SetId("Split macro user stories observer 1");
  man.AddObserver(oe);
  
  

  iae = (InternalActiveEntry)man.GetActiveState("Split macro user stories");
  iae.setObsid("Split macro user stories observer 1");
  
  oe= new ObserverEntry(ObserverEntry.ACTIVE,"Estimate user stories");
  oe.SetId("Estimate user stories observer 1");
  man.AddObserver(oe);
  
  

  iae = (InternalActiveEntry)man.GetActiveState("Estimate user stories");
  iae.setObsid("Estimate user stories observer 1");
  
  oe= new ObserverEntry(ObserverEntry.ACTIVE,"Solo programming with test first");
  oe.SetId("Solo programming with test first observer 1");
  man.AddObserver(oe);
  
  

  iae = (InternalActiveEntry)man.GetActiveState("Solo programming with test first");
  iae.setObsid("Solo programming with test first observer 1");
  

  //generate the model

  if (man.GenerateModel())
     System.out.println("\nModel successfuly generated!");
  else
  {
     System.out.println("\nThere was an errors during the model generation!");
     System.out.println("Exiting...");
     return;
  }

  //start the simulation

  System.out.println("Starting the simulation. Simulation wil run unitl time=500");

  man.ExecuteSimulation(500);

  while (!man.Finished())
  {
   try
   {
    Thread.sleep(1000);
   }
   catch(InterruptedException e) {break;}
  }

  System.out.println("Simulation Stopped!");

  //finally, output the results

  Iterator it;
  HashMap observers = man.getObservers();
  it = observers.values().iterator();

  man.OutputSimulationResults ("XP_Final.out");
  

  
  System.out.println("\nThat's all folks!");
 }
}
